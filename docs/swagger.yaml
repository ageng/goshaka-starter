basePath: /
definitions:
  structs.EmailUpdate:
    properties:
      token:
        type: string
    required:
    - token
    type: object
  structs.GoogleOneTap:
    properties:
      id_token:
        type: string
    required:
    - id_token
    type: object
  structs.Login:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  structs.NoteCreate:
    properties:
      subtitle:
        type: string
      text:
        type: string
      title:
        type: string
    required:
    - subtitle
    - text
    - title
    type: object
  structs.PermissionCreate:
    properties:
      display:
        type: string
      name:
        type: string
    required:
    - display
    - name
    type: object
  structs.ProfileUpdate:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      password_confirmation:
        type: string
    required:
    - email
    - first_name
    type: object
  structs.RegistrationToken:
    properties:
      email:
        type: string
      password:
        type: string
      token:
        type: string
    required:
    - email
    - password
    - token
    type: object
  structs.RequestResetPassword:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  structs.ResendToken:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  structs.ResetPassword:
    properties:
      password:
        type: string
      password_confirmation:
        type: string
      token:
        type: string
    required:
    - password
    - password_confirmation
    - token
    type: object
  structs.RoleCreate:
    properties:
      display:
        type: string
      name:
        type: string
    required:
    - display
    - name
    type: object
  structs.UserCreate:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      password_confirmation:
        type: string
      role_id:
        type: integer
      username:
        type: string
    required:
    - email
    - first_name
    - password
    - password_confirmation
    - username
    type: object
info:
  contact:
    email: wigunaahmadaulia@gmail.com
    name: Aulia Wiguna
    url: https://github.com/auliawiguna/
  description: This is an API boilerplate using Golang
  title: Goshaka Golang API Starter
  version: "1.0"
paths:
  /api/v1:
    get:
      consumes:
      - application/json
      description: Show greeting
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Say hi
      tags:
      - Root
  /api/v1/auth/google-one-tap:
    post:
      consumes:
      - application/json
      description: Handle Google One Tap login
      parameters:
      - description: email
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/structs.GoogleOneTap'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Handle Google One Tap login
      tags:
      - Auth
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: email
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/structs.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Login
      tags:
      - Auth
  /api/v1/auth/my-profile:
    get:
      consumes:
      - application/json
      description: My Profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: My Profile
      tags:
      - Auth
    put:
      consumes:
      - application/json
      description: Update Profile
      parameters:
      - description: email
        in: body
        name: usersRequest
        required: true
        schema:
          $ref: '#/definitions/structs.ProfileUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update Profile
      tags:
      - Auth
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Register new account
      parameters:
      - description: email
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/structs.UserCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Register new account
      tags:
      - Auth
  /api/v1/auth/request-reset-password:
    post:
      consumes:
      - application/json
      description: Request reset password
      parameters:
      - description: email
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/structs.RequestResetPassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Request reset password
      tags:
      - Auth
  /api/v1/auth/resend-registration-token:
    post:
      consumes:
      - application/json
      description: Resend registration token
      parameters:
      - description: email
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/structs.ResendToken'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Resend registration token
      tags:
      - Auth
  /api/v1/auth/reset-password:
    post:
      consumes:
      - application/json
      description: Request reset password
      parameters:
      - description: email
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/structs.ResetPassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Request reset password
      tags:
      - Auth
  /api/v1/auth/validate-new-email:
    post:
      consumes:
      - application/json
      description: Validate new email address
      parameters:
      - description: email
        in: body
        name: usersRequest
        required: true
        schema:
          $ref: '#/definitions/structs.EmailUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Validate new email address
      tags:
      - Auth
  /api/v1/auth/validate-registration:
    post:
      consumes:
      - application/json
      description: Validate registration
      parameters:
      - description: token
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/structs.RegistrationToken'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Validate registration
      tags:
      - Auth
  /api/v1/files/upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload a file to a specified AWS S3 bucket
      parameters:
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      - description: A string value (optional)
        in: formData
        name: string
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            type: string
        "400":
          description: Error message
          schema:
            type: string
        "500":
          description: Error message
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Upload a file to AWS S3
      tags:
      - File Upload
  /api/v1/files/userfile:
    get:
      consumes:
      - application/json
      description: Show notes
      parameters:
      - default: 10
        description: Default 10
        in: query
        name: limit
        type: integer
      - default: 1
        description: Default 10
        in: query
        name: page
        type: integer
      - description: Sorting
        enum:
        - ID asc
        - ID desc
        - title asc
        - title desc
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Show notes
      tags:
      - File Upload
    post:
      consumes:
      - multipart/form-data
      description: Upload a file to a specified AWS S3 bucket
      parameters:
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      - description: A string value (optional)
        in: formData
        name: string
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            type: string
        "400":
          description: Error message
          schema:
            type: string
        "500":
          description: Error message
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Upload a file to AWS S3
      tags:
      - File Upload
  /api/v1/files/userfile/{id}:
    delete:
      consumes:
      - application/json
      description: Show detail file
      parameters:
      - default: 10
        description: ID
        in: path
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Show detail file
      tags:
      - File Upload
    get:
      consumes:
      - application/json
      description: Show detail file
      parameters:
      - default: 10
        description: ID
        in: path
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Show detail file
      tags:
      - File Upload
  /api/v1/notes:
    get:
      consumes:
      - application/json
      description: Show notes
      parameters:
      - default: 10
        description: Default 10
        in: query
        name: limit
        type: integer
      - default: 1
        description: Default 10
        in: query
        name: page
        type: integer
      - description: Sorting
        enum:
        - ID asc
        - ID desc
        - title asc
        - title desc
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Show notes
      tags:
      - Notes
    post:
      consumes:
      - application/json
      description: Create new note
      parameters:
      - description: title
        in: body
        name: notesRequest
        required: true
        schema:
          $ref: '#/definitions/structs.NoteCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Create new note
      tags:
      - Notes
  /api/v1/notes/{id}:
    delete:
      consumes:
      - application/json
      description: Delete existing note
      parameters:
      - default: 10
        description: ID
        in: path
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Delete existing note
      tags:
      - Notes
    get:
      consumes:
      - application/json
      description: Show detail note
      parameters:
      - default: 10
        description: ID
        in: path
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Show detail note
      tags:
      - Notes
    put:
      consumes:
      - application/json
      description: Update existing note
      parameters:
      - default: 10
        description: ID
        in: path
        name: id
        type: integer
      - description: title
        in: body
        name: notesRequest
        required: true
        schema:
          $ref: '#/definitions/structs.NoteCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Update existing note
      tags:
      - Notes
  /api/v1/permissions:
    get:
      consumes:
      - application/json
      description: Show permissions
      parameters:
      - default: 10
        description: Default 10
        in: query
        name: limit
        type: integer
      - default: 1
        description: Default 10
        in: query
        name: page
        type: integer
      - description: Sorting
        enum:
        - ID asc
        - ID desc
        - title asc
        - title desc
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Show permissions
      tags:
      - Permissions
    post:
      consumes:
      - application/json
      description: Create new permission
      parameters:
      - description: title
        in: body
        name: permissionsRequest
        required: true
        schema:
          $ref: '#/definitions/structs.PermissionCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create new permission
      tags:
      - Permissions
  /api/v1/permissions/{id}:
    delete:
      consumes:
      - application/json
      description: Delete existing permission
      parameters:
      - default: 10
        description: ID
        in: path
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete existing permission
      tags:
      - Permissions
    get:
      consumes:
      - application/json
      description: Show detail permission
      parameters:
      - default: 10
        description: ID
        in: path
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Show detail permission
      tags:
      - Permissions
    put:
      consumes:
      - application/json
      description: Update existing permission
      parameters:
      - default: 10
        description: ID
        in: path
        name: id
        type: integer
      - description: title
        in: body
        name: permissionsRequest
        required: true
        schema:
          $ref: '#/definitions/structs.PermissionCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update existing permission
      tags:
      - Permissions
  /api/v1/protected:
    get:
      consumes:
      - application/json
      description: Show greeting
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Say hi
      tags:
      - Root
  /api/v1/roles:
    get:
      consumes:
      - application/json
      description: Show roles
      parameters:
      - default: 10
        description: Default 10
        in: query
        name: limit
        type: integer
      - default: 1
        description: Default 10
        in: query
        name: page
        type: integer
      - description: Sorting
        enum:
        - ID asc
        - ID desc
        - title asc
        - title desc
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Show roles
      tags:
      - Roles
    post:
      consumes:
      - application/json
      description: Create new role
      parameters:
      - description: title
        in: body
        name: rolesRequest
        required: true
        schema:
          $ref: '#/definitions/structs.RoleCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create new role
      tags:
      - Roles
  /api/v1/roles/{id}:
    delete:
      consumes:
      - application/json
      description: Delete existing role
      parameters:
      - default: 10
        description: ID
        in: path
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete existing role
      tags:
      - Roles
    get:
      consumes:
      - application/json
      description: Show detail role
      parameters:
      - default: 10
        description: ID
        in: path
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Show detail role
      tags:
      - Roles
    put:
      consumes:
      - application/json
      description: Update existing role
      parameters:
      - default: 10
        description: ID
        in: path
        name: id
        type: integer
      - description: title
        in: body
        name: rolesRequest
        required: true
        schema:
          $ref: '#/definitions/structs.RoleCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update existing role
      tags:
      - Roles
  /api/v1/users:
    get:
      consumes:
      - application/json
      description: Show users
      parameters:
      - default: 10
        description: Default 10
        in: query
        name: limit
        type: integer
      - default: 1
        description: Default 10
        in: query
        name: page
        type: integer
      - description: Sorting
        enum:
        - ID asc
        - ID desc
        - title asc
        - title desc
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Show users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create new user
      parameters:
      - description: title
        in: body
        name: usersRequest
        required: true
        schema:
          $ref: '#/definitions/structs.UserCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create new user
      tags:
      - Users
  /api/v1/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete existing user
      parameters:
      - default: 10
        description: ID
        in: path
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete existing user
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Show detail user
      parameters:
      - default: 10
        description: ID
        in: path
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Show detail user
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update existing user
      parameters:
      - default: 10
        description: ID
        in: path
        name: id
        type: integer
      - description: title
        in: body
        name: usersRequest
        required: true
        schema:
          $ref: '#/definitions/structs.UserCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update existing user
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
